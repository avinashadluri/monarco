{"version":3,"sources":["Table.js","App.js","reportWebVitals.js","index.js"],"names":["TableData","data","Table","Header","Row","HeaderCell","Body","map","row","i","Cell","Name","Contact","BusinessName","TypeOfService","LastUsed","CummulativeCount","AddedBy","AddedOn","API","App","useState","loading","state","setState","useEffect","a","axios","get","then","response","fetchData","setFields","elem","target","name","value","Container","fluid","className","as","Form","Field","placeholder","onChange","e","iconPosition","event","Button","color","type","onClick","preventDefault","body","Date","toDateString","post","alert","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bbb4533d.chunk.js","sourcesContent":["import { Table } from \"semantic-ui-react\";\n\nconst TableData = ({ data }) => {\n  return (\n    <Table>\n      <Table.Header>\n        <Table.Row>\n          <Table.HeaderCell>Name</Table.HeaderCell>\n          <Table.HeaderCell>Contact</Table.HeaderCell>\n          <Table.HeaderCell>BusinessName</Table.HeaderCell>\n          <Table.HeaderCell>TypeOfService</Table.HeaderCell>\n          <Table.HeaderCell>LastUsed</Table.HeaderCell>\n          <Table.HeaderCell>CummulativeCount</Table.HeaderCell>\n          <Table.HeaderCell>AddedBy</Table.HeaderCell>\n          <Table.HeaderCell>AddedOn</Table.HeaderCell>\n        </Table.Row>\n      </Table.Header>\n\n      <Table.Body>\n        {data?.map((row, i) => (\n          <Table.Row key={i}>\n            <Table.Cell>{row.Name}</Table.Cell>\n            <Table.Cell>{row.Contact}</Table.Cell>\n            <Table.Cell>{row.BusinessName}</Table.Cell>\n            <Table.Cell>{row.TypeOfService}</Table.Cell>\n            <Table.Cell>{row.LastUsed}</Table.Cell>\n            <Table.Cell>{row.CummulativeCount}</Table.Cell>\n            <Table.Cell>{row.AddedBy}</Table.Cell>\n            <Table.Cell>{row.AddedOn}</Table.Cell>\n          </Table.Row>\n        ))}\n      </Table.Body>\n    </Table>\n  );\n};\n\nexport default TableData;\n","import { useState, useEffect } from \"react\";\nimport { Button, Form, Container, Header } from \"semantic-ui-react\";\nimport axios from \"axios\";\nimport { DateInput } from \"semantic-ui-calendar-react\";\nimport TableData from \"./Table\";\nimport \"./App.css\";\n\nconst API =\n  \"https://sheet.best/api/sheets/11a66d7e-2aee-4fd7-be05-98973acbfd1e\";\n\nconst App = () => {\n  const [state, setState] = useState({\n    Name: \"\",\n    Contact: \"\",\n    BusinessName: \"\",\n    TypeOfService: \"\",\n    LastUsed: \"\",\n    CummulativeCount: \"\",\n    AddedBy: \"\",\n    data: [],\n    loading: true,\n  });\n\n  const {\n    Name,\n    Contact,\n    BusinessName,\n    TypeOfService,\n    LastUsed,\n    CummulativeCount,\n    AddedBy,\n    data,\n    loading,\n  } = state;\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (\n      Name &&\n      Contact &&\n      BusinessName &&\n      TypeOfService &&\n      LastUsed &&\n      CummulativeCount &&\n      AddedBy\n    ) {\n      const body = {\n        Name,\n        Contact,\n        BusinessName,\n        TypeOfService,\n        LastUsed,\n        CummulativeCount,\n        AddedBy,\n        AddedOn: new Date().toDateString(),\n      };\n\n      axios.post(API, body).then((response) => {\n        setState({ ...state, data: [...state.data, response.data[0]] });\n      });\n    } else {\n      alert(\"Please fill the form\");\n    }\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await axios.get(API).then((response) => {\n        setState({ ...state, data: response.data, loading: false });\n      });\n    };\n    fetchData();\n  }, []);\n\n  const setFields = (elem) => {\n    setState({\n      ...state,\n      [elem.target.name]: elem.target.value,\n    });\n  };\n\n  const setDate = (event, { name, value }) => {\n    setState({\n      ...state,\n      [name]: value,\n    });\n  };\n  if (loading) return <h2>Loading....</h2>;\n  return (\n    <Container fluid className=\"container\">\n      <Header as=\"h2\">Monarco vendor data</Header>\n      <Form className=\"form\">\n        <Form.Field>\n          <label>Name</label>\n          <input\n            placeholder=\"Enter your Name\"\n            name=\"Name\"\n            onChange={(e) => {\n              setFields(e);\n            }}\n          />\n        </Form.Field>\n        <Form.Field>\n          <label>Contact</label>\n          <input\n            placeholder=\"Enter Contact\"\n            name=\"Contact\"\n            onChange={(e) => {\n              setFields(e);\n            }}\n          />\n        </Form.Field>\n        <Form.Field>\n          <label>Business Name</label>\n          <input\n            placeholder=\"Enter Business Name\"\n            name=\"BusinessName\"\n            onChange={(e) => {\n              setFields(e);\n            }}\n          />\n        </Form.Field>\n        <Form.Field>\n          <label>Type Of Service</label>\n          <input\n            placeholder=\"Enter Type Of Service\"\n            name=\"TypeOfService\"\n            onChange={(e) => {\n              setFields(e);\n            }}\n          />\n        </Form.Field>\n        <Form.Field>\n          <label>Last Used</label>\n          <DateInput\n            name=\"LastUsed\"\n            placeholder=\"Enter Last Used\"\n            value={LastUsed}\n            iconPosition=\"left\"\n            onChange={setDate}\n          />\n        </Form.Field>\n        <Form.Field>\n          <label>Cummulative Count</label>\n          <input\n            placeholder=\"Enter Cummulative Count\"\n            name=\"CummulativeCount\"\n            onChange={(e) => {\n              setFields(e);\n            }}\n          />\n        </Form.Field>\n        <Form.Field>\n          <label>Added By</label>\n          <input\n            placeholder=\"Enter Added By (Avinash, 510, D ...)\"\n            name=\"AddedBy\"\n            onChange={(e) => {\n              setFields(e);\n            }}\n          />\n        </Form.Field>\n        <div className=\"navigation\">\n          <Button color=\"blue\" type=\"submit\" onClick={handleSubmit}>\n            Submit\n          </Button>\n        </div>\n      </Form>\n      <hr />\n      <TableData data={data} />\n    </Container>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"semantic-ui-css/semantic.min.css\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}